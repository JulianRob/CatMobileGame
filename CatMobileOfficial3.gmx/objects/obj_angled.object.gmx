<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_angled</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>frame = 0;
counter = 0;

delay = -1;

angle = 0;

increase = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(instance_exists(obj_controls))
{
   if (frame == 4 &amp;&amp; !instance_exists(obj_player_head) &amp;&amp; (obj_player.state == 0 || obj_player.state = 3 || obj_player.state = 1 || obj_player.state == 2))
    {
        audio_play_sound(snd_Shots,3,false);
        audio_sound_gain(snd_Shots,0.3,0);
        obj_player.state = 10;
        delay = 5;
        
        instance_create(obj_player.x+68,obj_player.y-20,obj_player_head);
        
        with(obj_player)
        {
            image_speed = 0.5
            sprite_index = spr_player_ground_headless;
        }
        
        with(obj_player_head)
        {
            image_index = 0;
            image_speed = 1;
            if(obj_player.grounded != 1)
            {
                sprite_index = spr_player_up;
                image_angle = -45;
            }
            else
            {
                sprite_index = spr_player_up;
            }
        }
        
    }
    
    if(delay &gt;= 0)
    {
        with(obj_player)
        {
            image_speed = 0.5;
            sprite_index = spr_player_ground_headless;
        }
        
        delay-= 1;
        
        obj_player_head.y = obj_player.y-20; 
        
          if(obj_controls.left == true &amp;&amp; obj_controls.right == true)
            {
                obj_player_head.x = obj_player.x +68;
            }
            else
            {
                obj_player_head.x = obj_player.x +68;
            }   
        
        if(delay == 1)
        {
            if(obj_player.grounded == 1)
            {
               with instance_create(obj_player_head.x+14, obj_player_head.y+2, obj_laser2) //up
                 {
                    image_angle = 30;
                    up = true;
                 }   
            }
            else
            {
                with instance_create(obj_player_head.x+8, obj_player_head.y+9, obj_laser2) //down
                 {
                   image_angle = -30;
                   up = false;
                   
                 }
            }
        }
    }
    
    if(delay == 0)
    {
        delay-=1;
        if(instance_exists(obj_player_head))
        {
            with(obj_player_head)
            {
                instance_destroy();
            }
        }
        
        with(obj_player)
        {
            sprite_index = spr_player_run;
        }
        
        obj_player.state = 0;
    }
    
    if (counter &gt;= 1)
    {
        frame+=1;
    }
    
    if (frame == 10)
    {
        counter = 0;
        frame = 0;
    }
}
else
{
    if (frame == 4 &amp;&amp; !instance_exists(obj_player_head) &amp;&amp; (obj_player.state == 0 || obj_player.state = 3 || obj_player.state = 1 || obj_player.state == 2))
    {
        audio_play_sound(snd_Shots,3,false);
        audio_sound_gain(snd_Shots,0.3,0);
        obj_player.state = 10;
        delay = 5;
        
        instance_create(obj_player.x+(cos(degtorad(obj_player.image_angle))*68)-sin(degtorad(obj_player.image_angle))*20,obj_player.y-(sin(degtorad(obj_player.image_angle))*68)-cos(degtorad(obj_player.image_angle))*20,obj_player_head);
        
        with(obj_player)
        {
            image_speed = 0.5
            sprite_index = spr_player_ground_headless;
        }
        
        with(obj_player_head)
        {
            image_index = 0;
            image_speed = 1;
            if(obj_player.grounded != 1)
            {
                sprite_index = spr_player_up;
                if(sign(obj_player.image_xscale &gt; 0))
                {
                    obj_angled.angle = 1;
                }
                else
                {
                    obj_angled.angle = 2;
                }
            }
            else
            {
                sprite_index = spr_player_up;
                obj_angled.angle = 3;
            }
        }
        
    }
    
    if(delay &gt;= 0)
    {
        with(obj_player)
        {
            image_speed = 0.5;
            sprite_index = spr_player_ground_headless;
        }
        
        delay-= 1;
        
        with(obj_player_head)
        {
            if(sign(obj_player.image_xscale &gt; 0))
            {
                x = obj_player.x+(cos(degtorad(obj_player.image_angle))*68)-sin(degtorad(obj_player.image_angle))*20+obj_player.hspeed;
                y = obj_player.y-(sin(degtorad(obj_player.image_angle))*68)-cos(degtorad(obj_player.image_angle))*20+obj_player.vspeed;
                image_xscale = 0.8;
            }
            else
            {
                x = obj_player.x-(cos(degtorad(obj_player.image_angle))*68)-sin(degtorad(obj_player.image_angle))*20+obj_player.hspeed;
                y = obj_player.y+(sin(degtorad(obj_player.image_angle))*68)-cos(degtorad(obj_player.image_angle))*20+obj_player.vspeed
                image_xscale = -0.8;
            }
            
            if(obj_angled.angle == 1)
            {
                image_angle = obj_player.image_angle-45;
            }
            else if (obj_angled.angle == 2)
            {
                image_angle = obj_player.image_angle+45;
            }
            else
            {
                image_angle = obj_player.image_angle;
            }
        }
        
        
        if(delay == 1)
        {
            if(obj_player.grounded == 1)
            {
              if(sign(obj_player.image_xscale&gt;0))
                {
                   with instance_create(obj_player_head.x+14, obj_player_head.y+2, obj_laser2) //up
                     {
                        image_angle = 30;
                        up = true;
                     }   
                }
                else
                {
                     with instance_create(obj_player_head.x, obj_player_head.y+10, obj_laser2) //up
                         {
                            image_angle = -30;
                            up = true;
                         }    
                }
            }
            else
            {
                 if(sign(obj_player.image_xscale&gt;0))
                 {
                    with instance_create(obj_player_head.x+8, obj_player_head.y+9, obj_laser2) //down
                         {
                           image_angle = -30;
                           up = false;
                           
                         }
                 }
                 else
                 {
                    with instance_create(obj_player_head.x+8, obj_player_head.y+9, obj_laser2) //down
                         {
                           image_angle = 30;
                           up = false;
                           
                         }
                 }
            }
        }
    }
    
    if(delay == 0)
    {
        delay-=1;
        if(instance_exists(obj_player_head))
        {
            with(obj_player_head)
            {
                instance_destroy();
            }
        }
        
        with(obj_player)
        {
            sprite_index = spr_player_run;
        }
        
        obj_player.state = 0;
    }
    
    if (counter &gt;= 1)
    {
        frame+=1;
    }
    
    if (frame == 10)
    {
        counter = 0;
        frame = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_alpha = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_alpha = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
