<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>counter = 0;
control = 0;
control2 = 0;
control3 = 0;
control4 = 0;
control5 = 0;
control6 = 0;
control7 = 0;

air = 0;

left = false;
right = false;
up = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw event mult-touch test

for (var i = 0; i &lt; 4;i++) // 4 touch
{
    if device_mouse_check_button(i,mb_left) 
    {
        var xx = device_mouse_x(i);
        var yy = device_mouse_y(i);
        
        if(position_meeting(xx,yy,obj_straight) &amp;&amp; control == 0)
        {
            obj_straight.counter +=1;
            control = 1;
            obj_straight.image_alpha = .5;
        }
        
        if(position_meeting(xx,yy,obj_left) &amp;&amp; control2 == 0)
        {
            control2 = 1;
            if(instance_exists(obj_controls))
            {
                if (obj_player.x &gt; obj_init.leftBarrier &amp;&amp; (obj_player.state = 0 || obj_player.state = 1 || obj_player.state == 10))
                {
                    obj_player.state = 1;
                    obj_player.x -= 10;
                    
                     if(!instance_exists(obj_player_head))
                     {
                        with(obj_player)
                        {
                            image_speed = 0.25;
                            sprite_index = spr_player_run;
                        }
                     }
                }
                else if (obj_player.x &gt; obj_init.leftBarrier)
                {
                    obj_player.x -= 10;
                }
                
                obj_left.image_alpha = .5;
            }
        }
        
        if(position_meeting(xx,yy,obj_up) &amp;&amp; control3 == 0)
        {
            control3 = 1;
            if(instance_exists(obj_controls))
            {
                if (obj_player.grounded)
                {
                    obj_player.state = 2;
                    
                     if(obj_up.alarm[0] == -1)
                     {
                        obj_up.alarm[0] = 4;
                     }
                }
                obj_up.image_alpha = .5;
            }
        }
        
        if(position_meeting(xx,yy,obj_right) &amp;&amp; control4 == 0)
        {
            control4 = 1;
            if(instance_exists(obj_controls))
            {
                if (obj_player.x &lt; room_width-300 &amp;&amp; (obj_player.state == 0 || obj_player.state == 3 || obj_player.state == 10))
                {
                    obj_player.state = 3;
                    obj_player.x += 10;
                    if(!instance_exists(obj_player_head))
                    {
                        with(obj_player)
                        {
                            image_speed = 0.75;
                            sprite_index = spr_player_run;
                        }
                    }
                }
                else if (obj_player.x &lt; room_width-300)
                {
                    obj_player.x += 10;
                }
                obj_right.image_alpha = .5;
            }
        }
        
        if(position_meeting(xx,yy,obj_angled) &amp;&amp; control5 == 0)
        {
            control5 = 1;
            obj_angled.image_alpha = .5;
            obj_angled.counter+=1;
        }
        
        if(position_meeting(xx,yy,obj_MOD) &amp;&amp; control6 == 0)
        {
            control6 = 1;
            if (obj_player.kills &gt;= 1)
                {
                    instance_create(obj_player.x,obj_player.y,obj_MOD2);
                    obj_player.kills = 0;
                    audio_play_sound(snd_MOD_shot,3,false);
                    audio_sound_gain(snd_MOD_shot,0.3,0);
                }
        }
        
        if(position_meeting(xx,yy,obj_melee) &amp;&amp; control7 == 0)
        {
            control7 = 1;
            if(obj_melee.alarm[0] == -1 &amp;&amp; obj_player.grounded = 1)
                {
                    air = 0;
                    audio_play_sound(snd_meleeAttack,3,false);
                    obj_player.state = 4;
                    if(obj_melee.initial &lt; 2)
                    {
                        obj_melee.initial +=1;
                        obj_melee.alarm[0] = 60;
                    }
                    else
                    {
                        obj_melee.alarm[0] = 600;
                        obj_melee.initial = 0;
                    }
                        with (obj_player)
                            {
                                image_index = 0;
                                image_speed = (1/3);
                                sprite_index = spr_player_attack2;
                            }
                    obj_melee.image_alpha = .5;
                }
            else if(obj_melee.alarm[0] == -1 &amp;&amp; obj_player.grounded = 0)
            {
                air = 1;
                 obj_player.state = 4;
                   if(obj_melee.initial &lt; 2)
                    {
                        obj_melee.initial +=1;
                        obj_melee.alarm[0] = 60;
                    }
                    else
                    {
                        obj_melee.alarm[0] = 600;
                        obj_melee.initial = 0;
                    }
                        with (obj_player)
                            {
                                image_index = 0;
                                image_speed = (1/3);
                                sprite_index = spr_player_aerial;
                            }
                    obj_melee.image_alpha = .5;
            }
        }  
    }
}

if(control2 == 1)
{
    left = true;
    obj_left.image_alpha = 0.5
}
else
{
    left = false;
    obj_left.image_alpha = 1;
}

if(control3 == 1)
{
    up = true;
    obj_up.image_alpha = 0.5;
}
else
{
    up = false;
    obj_up.image_alpha = 1;
}

if(control4 == 1)
{
    right = true;
    obj_right.image_alpha = 0.5
}
else
{
    right = false;
    obj_right.image_alpha = 1;
}


control = 0;
control2 = 0;
control3 = 0;
control4 = 0;
control5 = 0;
control6 = 0;
control7 = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
