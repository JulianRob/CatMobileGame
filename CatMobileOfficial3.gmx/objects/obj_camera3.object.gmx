<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>cspeed = 6; //camera speed; was 10
initial = false;

active = false;
active2 = false;
active3 = false;

yPosition = 0;
initialPosition = 0;
newPosition = 0;
newPosition2 = 0;
range = 0;
limit = 200;

center = 0;
offset = 50;

start = 0;
long = 0;
follow = 0;
position = 0;
ip = 0; //initial position
np = 0; //new position

high = 0;
move = -200;
first = false;
spring = false;
rise = 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(instance_exists(obj_left) &amp;&amp; instance_exists(obj_right) &amp;&amp; instance_exists(obj_MOD) &amp;&amp; 
    instance_exists(obj_melee) &amp;&amp; instance_exists(obj_angled) &amp;&amp; instance_exists(obj_straight) 
    &amp;&amp; instance_exists(obj_up) &amp;&amp; instance_exists(obj_switch))
{
    
    //VERTICAL CAMERA MOVEMENT ATTEMPT #2
    //Initializes the camera
    if(initial == false)
    {
        obj_left.y = (obj_player.y+179); //106?
        obj_right.y = obj_player.y+179;
        obj_MOD.y = obj_player.y+179;
        obj_melee.y = obj_player.y+179;
        obj_angled.y = obj_player.y+179;
        obj_straight.y = obj_player.y+179;
        obj_up.y = obj_player.y+179;
        obj_switch.y = obj_player.y+179;  
        obj_heart.y = obj_player.y-320;
        obj_kills.y = obj_player.y-320;
        obj_paws.y = obj_player.y-320;
        obj_background_controls.y = obj_player.y+179;
        view_yview[0] = obj_player.y-385; 
        background_y[0] = obj_player.y-385;
        
        view_xview[0] = obj_player.x-view_wview[0]/2;
        
        background_x[0] = obj_player.x-view_wview[0]/2;
        
        obj_left.x = view_xview[0]+(50*1.15);
        obj_right.x = view_xview[0]+(150*1.15);
        obj_MOD.x = view_xview[0]+(590*1.15);
        obj_melee.x = view_xview[0]+(290*1.15);
        obj_angled.x = view_xview[0]+(725*1.15);
        obj_straight.x = view_xview[0]+(815*1.15);
        obj_up.x = view_xview[0]+(910*1.15);
        obj_switch.x = view_xview[0]+(440*1.15);
        
        obj_heart.x =  view_xview[0]+125;
        obj_kills.x = view_xview[0]+(800);
        obj_paws.x = view_xview[0]+(300);
        obj_background_controls.x = view_xview[0];
        
        initialPosition = room_height-400; //obj_player.y-385
        
        if(obj_player.grounded == 1)
        {
            initial = true;
        } 
    }
    
    //Going down obj_player.vsp &gt; 10 || 
    if(obj_player.grounded == 1 &amp;&amp; initialPosition &gt;= view_yview[0])
    {
        active = false;
        active2 = true;
        active3 = false;
        range = abs(initialPosition - (obj_player.y-385));
        if(range &gt;= 200)
        {
            newPosition = obj_player.y+200-385;
        }
        else
        {
            newPosition = initialPosition;
        }
    }
    
    //Going Up
    if(obj_player.grounded == 1 &amp;&amp; initialPosition &gt;= view_yview[0])
    {
       
        active = true;
        active2 = false;
        active3 = false;
        
        range = abs(initialPosition - (obj_player.y-385));
        if(range &gt;= 50)
        {
            newPosition = obj_player.y+50-385;
        }
        else
        {
            newPosition = initialPosition;
        }
        
        //yPosition = obj_player.y-320
    }
    
    //Flat Ground
    if(obj_player.grounded == 1 &amp;&amp; initialPosition &gt;= view_yview[0])
    {
        active = false;
        active2 = false;
        active3 = true;
        range = abs(initialPosition - (obj_player.y-385));
        if(range &gt;= 50) //150
        {
            newPosition = obj_player.y+50-385; //150
        }
        else
        {
            newPosition = initialPosition;
        }
    }
    
    //Changes in height
    change2 = round(((newPosition) - view_yview[0])/10);
    
    if(active == true)
    {
        obj_left.y += change2;
        obj_right.y += change2;
        obj_MOD.y += change2;
        obj_melee.y += change2;
        obj_angled.y += change2;
        obj_straight.y += change2;
        obj_up.y += change2;
        obj_switch.y += change2;
        obj_heart.y += change2;
        obj_kills.y += change2;
        obj_paws.y += change2;
        obj_background_controls.y += change2;
        view_yview[0] += change2;
        background_y[0] += change2;
    }
    
    if(active2 == true)
    {
        obj_left.y += change2;
        obj_right.y += change2;
        obj_MOD.y += change2;
        obj_melee.y += change2;
        obj_angled.y += change2;
        obj_straight.y += change2;
        obj_up.y += change2;
        obj_switch.y += change2;
        obj_heart.y += change2;
        obj_kills.y += change2;
        obj_paws.y += change2;
        obj_background_controls.y += change2;
        view_yview[0] += change2;
        background_y[0] += change2;
    }
    
    if(active3 == true)
    {
        obj_left.y += change2;
        obj_right.y += change2;
        obj_MOD.y += change2;
        obj_melee.y += change2;
        obj_angled.y += change2;
        obj_straight.y += change2;
        obj_up.y += change2;
        obj_switch.y += change2;
        obj_heart.y += change2;
        obj_kills.y += change2;
        obj_paws.y += change2;
        obj_background_controls.y += change2;
        view_yview[0] += change2;
        background_y[0] += change2;
    }
    
    //SPRING
    if(instance_exists(obj_spring))
    {
    
        if(obj_spring.hit == true)
        {
            spring = true;
            
            active = false;
            active2 = false;
            active3 = false;
            
            obj_left.y += (obj_player.vsp - obj_player.grav)/1.5;
            obj_right.y += (obj_player.vsp - obj_player.grav)/1.5;
            obj_MOD.y += (obj_player.vsp - obj_player.grav)/1.5;
            obj_melee.y += (obj_player.vsp - obj_player.grav)/1.5;
            obj_angled.y += (obj_player.vsp - obj_player.grav)/1.5;
            obj_straight.y += (obj_player.vsp - obj_player.grav)/1.5;
            obj_up.y += (obj_player.vsp - obj_player.grav)/1.5;
            obj_switch.y += (obj_player.vsp - obj_player.grav)/1.5;
            obj_heart.y += (obj_player.vsp - obj_player.grav)/1.5;
            obj_kills.y += (obj_player.vsp - obj_player.grav)/1.5;
            obj_paws.y += (obj_player.vsp - obj_player.grav)/1.5;
            obj_background_controls.y += (obj_player.vsp - obj_player.grav)/1.5;
            view_yview[0] += (obj_player.vsp - obj_player.grav)/1.5; 
            background_y[0] += (obj_player.vsp - obj_player.grav)/1.5;
        }
        
        if(obj_player.grounded == 1)
        {
            spring = false;
            obj_spring.hit = false;
        }  
    }

if (obj_player.grounded == false)
{
    for(i = 0; i &lt;= 500; i +=1)
    {
        if(position_meeting(obj_player.x,obj_player.y+i,obj_gr))
               {
                    i = 501;
               }
           else if(i &gt;= 500)
           {
                high = 1;
           }
    }
}

if(high == 1 &amp;&amp; spring == false)
{
    active = false;
    active2 = false;
    active3 = false;
    
    if (initialPosition &gt;= view_yview[0] + obj_player.vsp - obj_player.gravY)
    {
        obj_left.y += obj_player.vsp - obj_player.gravY;
        obj_right.y += obj_player.vsp - obj_player.gravY;
        obj_MOD.y += obj_player.vsp - obj_player.gravY;
        obj_melee.y += obj_player.vsp - obj_player.gravY;
        obj_angled.y += obj_player.vsp - obj_player.gravY;
        obj_straight.y += obj_player.vsp - obj_player.gravY;
        obj_up.y += obj_player.vsp - obj_player.gravY;
        obj_switch.y += obj_player.vsp - obj_player.gravY;
        obj_heart.y += obj_player.vsp - obj_player.gravY;
        obj_kills.y += obj_player.vsp - obj_player.gravY;
        obj_paws.y += obj_player.vsp - obj_player.gravY;
        obj_background_controls.y += obj_player.vsp - obj_player.gravY;
        view_yview[0] += obj_player.vsp - obj_player.gravY;
        background_y[0] += obj_player.vsp - obj_player.gravY;
    }
}

if(obj_player.grounded == true)
{
    first = 0;
    high = 0;
}

    
//HORIZONTAL CAMERA MOVEMENT  

    if(obj_player.x &lt; view_xview[0]+400 &amp;&amp; obj_player.left == true) //+400 was obj_controls.left
    {
        view_xview[0] += obj_player.hsp;
        background_x[0] += obj_player.hsp;
        
        obj_left.x += obj_player.hsp;
        obj_right.x += obj_player.hsp;
        obj_MOD.x += obj_player.hsp;
        obj_melee.x += obj_player.hsp;
        obj_angled.x += obj_player.hsp;
        obj_straight.x += obj_player.hsp;
        obj_up.x += obj_player.hsp;
        obj_switch.x += obj_player.hsp;
        
        obj_heart.x += obj_player.hsp;
        obj_kills.x += obj_player.hsp;
        obj_paws.x += obj_player.hsp;
        obj_background_controls.x += obj_player.hsp;
    }
    
     if(obj_player.x &gt; view_xview[0]+500 &amp;&amp; obj_player.right == true) //was obj_controls.right
    {
        view_xview[0] += obj_player.hsp;
        background_x[0] += obj_player.hsp;
        
        obj_left.x += obj_player.hsp;
        obj_right.x += obj_player.hsp;
        obj_MOD.x += obj_player.hsp;
        obj_melee.x += obj_player.hsp;
        obj_angled.x += obj_player.hsp;
        obj_straight.x += obj_player.hsp;
        obj_up.x += obj_player.hsp;
        obj_switch.x += obj_player.hsp;
        
        obj_heart.x += obj_player.hsp;
        obj_kills.x += obj_player.hsp;
        obj_paws.x += obj_player.hsp;
        obj_background_controls.x += obj_player.hsp;
    }
}
        
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
