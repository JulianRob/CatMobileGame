<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_monster2</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables
image_xscale = 0.3;
image_yscale = 0.3;

stage1 = 0;
stage2 = 0;
stage3 = 0;
stage4 = 0;

limit1 = 60;
limit2 = 50;
limit3 = 25;
limit4 = 25;

death1 = 0;
death2 = 0;

pause = 0;

alpha_level = 0;
alpha_increment = 0.1;

hp = 5;

blink = false;
counter1 = 0;

sound = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(death1 &lt;= 0)
{
    //Goes into the taunting Animation
    if (stage1 &lt; limit1)
    {
        image_speed = 0.25;
        sprite_index = spr_monster2_taunt;
        stage1 += 1;
    }
    
     //Resets the image index back to 0
    if (stage1 == limit1)
    {
        image_index = 0;
        sprite_index = spr_monster2_charge;
        stage1 += 1;
    }
    
    //Goes into the charging animation
    if (stage1 &gt;= limit1) &amp;&amp; (stage2 &lt; limit2)
    {
        if (image_index == 8)
        {
            image_speed = 0;
        }
        stage2 += 1;
    }
    
    //Resets index back to 0
    if (stage2 == limit2)
    {
        image_index = 0;
        image_speed = 0.5
        sprite_index = spr_monster2_hide;
        stage2 += 1;
    }
    
    //Goes into the hiding animation
    if (stage2 &gt;= limit2) &amp;&amp; (stage3 &lt; limit3)
    {
        if (image_index == 1)
        {
            image_speed = 0;
        }
        //stage3 += 1;
        move_towards_point(obj_t3Player.x, obj_t3Player.y, 5);
        if(5 &gt;= abs(obj_t3Player.x-x))
        {
            stage3 = limit3;
        }
    }
    
    //Resets index back to 0
    if (stage3 == limit3)
    {
        image_index = 0;
        speed = 0;
        image_speed = 0;
        sprite_index = spr_monster2;
        stage3 += 1;
    }
    
    if (stage3 - 1 == limit3)
    {
        pause++;
        if(pause == 45)
        {  
           sprite_index = spr_monster2_attack;   
            image_speed = 0.5;
        }
    }
    
    //Goes into the attacking animation
    if (stage3 &gt;= limit3) &amp;&amp; (stage4 &lt; limit4) &amp;&amp; (pause == 45)
    {
        if(image_index == 5)
        {
            image_speed = 0;
            with(obj_monster2_attack)
            {
                instance_destroy();
            }
        }    
    
         if(image_index &gt;= 1 &amp;&amp; image_index &lt;= 4)
            {
                if(sound == 0)
                {
                    audio_play_sound(snd_repearanSlash,3,false);
                    sound+=1;
                }
                 with(instance_create(x,y,obj_monster2_attack))
                  {
                    image_xscale = 0.3;
                    image_yscale = 0.3;
                      with(instance_place(x,y,obj_t3Player))
                       {
                         if (obj_t3Player.recently_hit == false)
                            {
                                obj_heart.hearts -= 1;
                                obj_t3Player.recently_hit = true;
                                obj_t3Player.alarm[0] = 2.5* room_speed;
                            }
                       }
                  }
            }
        
        stage3 += 1;
        stage4 += 1;
    }
    
    //Resets the image index back to 0
    if (stage4 == limit4)
    {
        image_index = 0;
        image_speed = 0.5;
        sprite_index = spr_monster2_vanish;
        stage4 += 1;
    }
    
    //Goes into the vanishing animation and destroys itself
    if (stage4 &gt;= limit4)
    {
        if(image_index == 3)
        {
            instance_destroy();
        }
    }
    
     //Dies when hit 3 times by the laser
    if(place_meeting(x,y,obj_laser) || place_meeting(x,y,obj_laser2) || place_meeting(x,y,obj_player_attack_hitbox))
    { 
        audio_play_sound(snd_hurt,3,false);
        audio_sound_gain(snd_hurt,0.2,0);
        
        if(place_meeting(x,y,obj_player_attack_hitbox))
        {
         if( blink == false)
            {
                hp -=5;
            }
        }
        
        if(place_meeting(x,y,obj_laser2))
            {
                var inst = instance_place(x,y,obj_laser2);
                with(inst)
                {
                    instance_destroy();
                }
                hp-=1;
            }
            
        if(place_meeting(x,y,obj_laser))
            {
                var inst2 = instance_place(x,y,obj_laser);
                with(inst2)
                {
                    instance_destroy();
                }
                hp-=1;
            }
            
    
        blink = true;
        counter1 = 0;
        alpha_increment = 0.1;
        alpha_level = 0;
        if (hp &lt;= 0)
        {    
            death1 = 1;
            obj_player.kills += .2;
            obj_player.slay += 1;
        }
    }
    
    if (place_meeting(x,y,obj_MOD2) &amp;&amp; death1 != 1)
    {
        blink = true;
        counter1 = 0;
        alpha_increment = 0.1;
        alpha_level = 0;   
        death1 = 1;
        obj_player.slay += 1;
    }
}

if(blink == true)
{
    counter1+=1;
    
    alpha_level += alpha_increment;
    if(alpha_level &lt; 0 || alpha_level &gt; 1)
        alpha_increment = -alpha_increment;
        
    if(alpha_level &lt; 0)
    { 
          counter1 = 0;
          blink = false;
          alpha_incrememnt = 0.1;
          alpha_level = 0;
    }
}

if(death1 == 1)
{
    audio_stop_sound(snd_repearanSlash);
    speed = 0;
    sprite_index = spr_monster2_death;
    death2 += 1;
    if(death2 &gt;= 30)
    {
     instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index,-1,x,y,0.3,0.3,0,c_white,1);

draw_set_blend_mode(bm_add);

draw_sprite_ext(sprite_index,-1,x,y,0.3,0.3,0,c_white,alpha_level);

draw_set_blend_mode(bm_normal);

if (counter1 == 0)
{
    draw_sprite_ext(sprite_index,-1,x,y,0.3,0.3,0,c_white,1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
