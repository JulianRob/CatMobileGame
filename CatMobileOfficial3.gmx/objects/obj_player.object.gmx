<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_run</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_player_run</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///variables
image_xscale = 0.8;
image_yscale = 0.8;
image_angle = 0;

gravX = 0;
gravY = 5;
//grav = 5;

vsp = 0; //Vertical speed
hsp = 0; //Horizontal speed
grounded = 0; //Are you on the ground
//0 is in the air while 1 is on the ground. 
jumping = -25; //Jumping force
kills = 0; //Enemies killed
recently_hit = false; //Checks to see if you were recently hit
counter = 0; //Animation?

slay = 0; //Number need to slay?
state = 0; //For priority

reset = 0; //This resets the animation to index 0;

alarm[1] = 0;

eye = 0;
eye2 = 0;

fix = 0;

land = 0;

image_speed = 0.5; 

runLeft  = 0; //running speed -9
runRight = 0; // running speed 9

var diff1X;
var diff1Y;
average1 = 0;
average2 = 0;

var x1;
y1 = 0;
var x2;
y2 = 0;

line1 = false;

speedx = 0;

speed = 0;
count = 0;

dir = 1;
maxSpeed = 10; //10
maxSpeedAir = 10;

count2 = 0;
fAngle = 0;

test = 0;

height = 0;

up    = false;
left  = false
right = false;

fpositionx = 0;
lpositionx = 0;
positionx = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(up == true)
{
    vsp = -23;
    hsp = speed;
    speed = 0;
   // image_angle = 0;
    grounded = false;
    audio_play_sound(snd_jump,3,false);
    audio_sound_gain(snd_jump,0.2,0);
    state = 2;
}
else
{
    vsp = -17;
    hsp = speed;
    speed = 0;
    //image_angle = 0;
    grounded = false;
    audio_play_sound(snd_jump,3,false);
    audio_sound_gain(snd_jump,0.2,0);
    state = 2;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>recently_hit = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//instance_deactivate_all(true);
//instance_activate_region(view_xview[1]-500, view_yview[1]-500, view_wview[1]+500, view_hview[1]+500, true);

fpositionx = x;

if(keyboard_check(ord('A')) == false &amp;&amp; obj_multitouch.left == false)
{
    left = false;
}
else
{
    left = true;
}

if(keyboard_check(ord('D')) == false &amp;&amp; obj_multitouch.right == false)
{
    right = false;
}
else
{
    right = true;
}

if(keyboard_check(ord('W')) == false &amp;&amp; obj_multitouch.up == false)
{
    up = false;
}
else
{
    up = true;
}

//Invincibility Frames
counter++;
if (counter &gt; 5)
{
    counter = 1;
}

//MOVEMENT

if(right &amp;&amp; grounded)
{
    if(image_xscale == -0.8)
    {
        height = y;
        direction+= 180;
        //sprite_set_offset(sprite_index,sprite_get_width(sprite_index)/2,sprite_get_yoffset(sprite_index));
        image_xscale = 0.8;
        while(place_meeting(x,y,obj_stable_ground))
        {
            count+=1;
            if(count &gt;= 30)
            {
                y = height;
                break;
            }
            y-=1;
        }
        count = 0;
    }
    
    if(place_meeting(x,y-40,obj_stable_ground))
    {
        height = y;
        direction+=180;
        //sprite_set_offset(sprite_index,sprite_get_width(sprite_index)/2,sprite_get_yoffset(sprite_index));
        image_xscale = -0.8;
        while(place_meeting(x,y,obj_stable_ground))
        {
            count+=1;
            if(count &gt;= 30)
            {
                y = height;
                break;
            }
            y-=1;
        }
        count = 0;
        if(place_meeting(x,y,obj_stable_ground))
        {
            height = y;
            direction+= 180;
           // sprite_set_offset(sprite_index,sprite_get_width(sprite_index)/2,sprite_get_yoffset(sprite_index));
            image_xscale = 0.8;
            while(place_meeting(x,y,obj_stable_ground))
            {
                count+=1;
                if(count &gt;= 30)
                {
                    y = height;
                    break;
                }
                y-=1;
            }
            count = 0;
            for(xx = 0; place_meeting(x+xx,y,obj_stable_ground) &amp;&amp; xx &lt;= 15;xx++)
            {
               count = xx;
                if(xx == 11)
                {
                    count = 0;
                    break;
                }
            }
           x+=count;
           speedx +=count;
           count = 0;
        }
    }
}

if(left &amp;&amp; grounded)
{
    if(image_xscale == 0.8)
    {
        height = y;
        direction+=180;
       // sprite_set_offset(sprite_index,sprite_get_width(sprite_index)/2,sprite_get_yoffset(sprite_index));
        image_xscale = -0.8;
        while(place_meeting(x,y,obj_stable_ground))
        {
            count+=1;
            if(count &gt;= 30)
            {
                y = height;
                break;
            }
            y-=1;
        }
        count = 0;
    }
    
    if(place_meeting(x,y-40,obj_stable_ground))
    {
        height = y;
        direction+= 180;
        //sprite_set_offset(sprite_index,sprite_get_width(sprite_index)/2,sprite_get_yoffset(sprite_index));
        image_xscale = 0.8;
        while(place_meeting(x,y,obj_stable_ground))
        {
            count+=1;
            if(count &gt;= 30)
            {
                y = height;
                break;
            }
            y-=1;
        }
        count = 0;
        if(place_meeting(x,y,obj_stable_ground))
        {
            height = y;
            direction+=180;
            //sprite_set_offset(sprite_index,sprite_get_width(sprite_index)/2,sprite_get_yoffset(sprite_index));
            image_xscale = -0.8;
            while(place_meeting(x,y,obj_stable_ground))
            {
                count+=1;
                if(count &gt;= 30)
                {
                    y = height;
                    break;
                }
                y-=1;
            }
            count = 0;
            for(xx = 0; place_meeting(x-xx,y,obj_stable_ground) &amp;&amp; xx &lt;= 15;xx++)
            {
                count = xx;
                if(xx == 11)
                {
                    count = 0;
                    break;
                }
            }
            x-= count;
            speedx -= count;
            count = 0;
        }
    }
    
}

if(grounded)
{
    count2 = 0;
    fAngle = image_angle; //first angle
    for(yy = 0; !position_meeting((x+cos(degtorad(image_angle))*10) + sin(degtorad(image_angle))*yy,(y-sin(degtorad(image_angle))*10)+cos(degtorad(image_angle))*yy,obj_stable_ground); yy++)
         {
             diff1X = yy;
             if(yy &gt;= 100)
             {
                 count2+=1;
                 image_angle+=45;
                 yy=0;
                if(count2&gt;9)
                {
                    image_angle = fAngle;
                    break;
                }
             }
         }
    for(yy = 0; !position_meeting(x+(sin(degtorad(image_angle))*yy),y+(cos(degtorad(image_angle))*yy),obj_stable_ground); yy++)
     {
         diff1Y = yy;
         if(yy &gt;= 100)
         {
             break;
         }
     }
    
    x1 = (x+cos(degtorad(image_angle))*10) + sin(degtorad(image_angle))*diff1X;
    y1 = (y-sin(degtorad(image_angle))*10)+ cos(degtorad(image_angle))*diff1X;
    x2 = x+(sin(degtorad(image_angle))*diff1Y);
    y2 = y+(cos(degtorad(image_angle))*diff1Y);
    
    var dist = sqrt(power(x2-x1,2)+power(y2-y1,2));
    
    if(radtodeg(arctan2(diff1Y-diff1X,dist)) != 0)
    {
        image_angle += radtodeg(arctan2(diff1Y-diff1X,dist))/3;
        if(image_angle &gt; 360)
        {
            image_angle -= 360;
        }
        if(image_angle &lt; 0)
        {
            image_angle+=360;
        }
    }
    
    height = y;
    while(place_meeting(x,y,obj_stable_ground))
    {
        count+=1
        if(count &gt;= 30)
        {
            y = height;
            break;
        }
        y-=1;
    }
    count = 0;
    line1 = true;
}
else
{
    line1 = false;
}

if(up)
{
    if(grounded)
    {
        if(alarm[1] == -1)
        {
            alarm[1] = 4;
        }
    }
} 

if(grounded)
{
    direction = image_angle;
    if(left)
    {
        if(speed &gt; 0)
        {
            speed = 0;
        }
        
        if(speed &lt;=-maxSpeed)
        {
            speed = -maxSpeed;
        }
        else
        {
            speed-=1;
        }
       
        if(place_meeting(x+hspeed,y+vspeed,obj_stable_ground))
        {
            if(place_meeting(x+hspeed,y-25,obj_stable_ground))
            {
                speed = 0;   
            }
        }
        
    }
    else if(right)
    {
        
        if(speed &lt; 0)
        {
            speed = 0;
        }
    
        if(speed &gt;=maxSpeed)
        {
            speed = maxSpeed;
        }
        else
        {
            speed+=1;
        }
        
      if(place_meeting(x+hspeed,y+vspeed,obj_stable_ground))
        {
            if(place_meeting(x+hspeed,y-25,obj_stable_ground))
            {
                speed = 0;   
            }
        }
    }
    else
    {
       if(speed &gt; 0)
        {
           speed-=1;
        }
       else if(speed &lt; 0)
       {
            speed+=1;
       }
    }
    count = 0;
}

if(!grounded)
{
    if(left)
    {
        hsp-=1;
            if(hsp &lt;= -maxSpeedAir)
            {
                hsp = -maxSpeedAir;
            }
        if(place_meeting(x+hsp,y,obj_stable_ground))
        {
            while(!place_meeting(x+sign(hsp),y,obj_stable_ground))
            {
             x+= sign(hsp);
             speedx +=sign(hsp);
            }
        }
        else
        {
            x+= hsp;
            speedx +=hsp;
        }
    }
    else if(right)
    {
        hsp+=1;
            if(hsp &gt;= maxSpeedAir)
            {
                hsp = maxSpeedAir;
            }
        if(place_meeting(x+hsp,y,obj_stable_ground))
        {
            while(!place_meeting(x+sign(hsp),y,obj_stable_ground))
            {
             x+= sign(hsp);   
             speedx =+ sign(hsp);
            }
        }
        else
        {
            x+= hsp;
            speedx += hsp;
        }
    }
    else if(place_meeting(x+hsp,y,obj_stable_ground))
    {
        while(!place_meeting(x+sign(hsp),y,obj_stable_ground))
            {
             x+= sign(hsp);   
             speedx +=sign(hsp);
            }
            hsp = 0;
            speedx = 0;
    }
    else
    {
        x+= hsp;
        speedx += hsp;
    }
    
    if(place_meeting(x,y+vsp,obj_stable_ground))
    {
        while(!place_meeting(x,y+sign(vsp),obj_stable_ground))
        {
            y+=sign(vsp);
        }
        vsp = 0;
        grounded = true;
    }
    else
    {
        y+=vsp;
       vsp+=1;
    }
}

if(place_meeting(x,y+20,obj_stable_ground) &amp;&amp; grounded)
{
    while(!place_meeting(x,y+1,obj_stable_ground))
    {
        y+=1;
    }
}

if(!place_meeting(x,y+1,obj_stable_ground) || (abs(speed) == 0) &amp;&amp; (!place_meeting(x+15,y+50,obj_stable_ground) || !place_meeting(x-15,y+50,obj_stable_ground)))
{
    grounded = false;
    if(place_meeting(x+15,y-10,obj_stable_ground))
    {
        if(hsp &lt;= 0)
        {
            x-=1;
            speedx -=1;
        }
        else
        {
            hsp = 0;
            x-=2;
            speedx = 0;
            speedx -=2;
        }
    }
    
    if(place_meeting(x-15,y-10,obj_stable_ground))
    {
        if(hsp &gt;= 0)
        {
            x+=1;
            speedx+=1;
        }
        else
        {
            hsp = 0;
            x+=2;
            speedx = 0;
            speedx +=2;
        }
    }
    speed = 0;
}
else
{
    grounded = true;
    hsp = 0;
    vsp = 0;
}
//MOVEMENT

/*
if(!place_meeting(x-25,y+100,obj_stable_ground)) //|| !place_meeting(x-25,y+100,obj_stable_ground) || !place_meeting(x+25,y+100,obj_stable_ground) !place_meeting(x,y+1,obj_stable_ground
{
    test+=1;
    show_debug_message(test);
}
*/

//Animations
if (state == 0)
{
    if (grounded)
    {
       image_speed = 0.5;
       sprite_index = spr_player_run;
        eye+=1;
        if(eye &gt;= 300 &amp;&amp; (image_index == 0 || eye2 = 1))
        {
            sprite_index = spr_player_blink;
            eye2 = 1;
            if(image_index = 7)
            {
                eye = 0;
                eye2 = 0;
            }
        }
    }
    else
   {
    eye = 0;
    eye2 = 0;
   }
}

if(state == 2)
{
   if(sprite_index == spr_player_attack2 &amp;&amp; fix == 0)
   {
    state = 4;
   }
   else
   {    
   
       if(vsp &lt; 0)
            {
                sprite_index = spr_player_jump;
                if (reset == 0)
                {
                    image_index = 0;
                    reset+= 1;
                }
                if(image_index == 2)
                {
                    image_speed = 0;
                }
            }
        
        if (vsp &gt; 0)
        {
            sprite_index = spr_player_jump;
            if(image_index &lt; 4)
            {
                image_index = 4;
            }
            image_speed = 0.5;
            if(image_index == 6)
            {
                image_speed = 0;
            }
        }   
        
        if(grounded == 1)
        {
            image_speed = 0.5
            image_index = 7;
            reset = 0;
            state = 0;
            sprite_index = spr_player_jump;
        }
    }
}

if (state == 4) //Attack animation
{
    if(obj_multitouch.air == 0)
    {
         fix = 0;
         if(image_index == 5)
         {
            instance_create(x+100,y-70,obj_player_attack_hitbox)
         }
         
         if(image_index = 12)
         {
            with(obj_player_attack_hitbox)
            {
                instance_destroy();
            }
         }
         
        if(image_index == 15)
        {
            state = 0;
            fix = 1;
        }
    }
    
    if(obj_multitouch.air == 1)
    {
        if (!instance_exists(obj_player_attack_hitbox2) &amp;&amp; image_index == 2)
        {
            instance_create(x+100,y,obj_player_attack_hitbox2);
        }
        
        if(image_index == 9)
        {
            image_index = 0;
            sprite_index = spr_player_run;
            state = 0;
        }
    }
    
}

if(grounded == 1 &amp;&amp; state != 4)
{
    sprite_index = spr_player_run;
}

if(obj_heart.hearts &lt;= 0)
{
    //obj_controls.isActive = false;
    instance_deactivate_object(obj_straight);
    instance_deactivate_object(obj_angled);
    instance_deactivate_object(obj_left);
    instance_deactivate_object(obj_up);
    instance_deactivate_object(obj_right);
    instance_deactivate_object(obj_melee);
    instance_deactivate_object(obj_MOD);
    instance_deactivate_object(obj_switch);
    
    if(instance_exists(obj_player_head))
    {
        with(obj_player_head)
        {
            instance_destroy();
        }
    }
    visble = false;
    obj_player.recently_hit = true;
}

speedx += hspeed;

lpositionx = x
positionx = (lpositionx-fpositionx)+hspeed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(line1 == true)
{
   //draw_set_colour(c_yellow);
   //draw_line(x1,y1,x2,y2);
 // draw_set_colour(c_red);
  // draw_line(x+cos(degtorad(image_angle))*10,y-sin(degtorad(image_angle))*10,(x+cos(degtorad(image_angle))*10) + sin(degtorad(image_angle))*diff1X,(y-sin(degtorad(image_angle))*10)+cos(degtorad(image_angle))*diff1X);
 //  draw_set_colour(c_blue);
  // draw_line(x,y,x+(sin(degtorad(image_angle))*diff1Y),y+(cos(degtorad(image_angle))*diff1Y));
   
}
draw_self();


if !(obj_heart.hearts &lt;= 0)
{
    if (recently_hit == true)
    {
        if counter mod 5 = 0
        {
            draw_self();
        }
        else
        {
            draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,image_angle,c_white,0.25)
        }
    }
    else
    {
        draw_self();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="88">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drops the framrate to 1

if(room_speed == 60)
{
    room_speed = 5;
}
else if(room_speed = 5)
{
    room_speed = 60;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>331</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_restart_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="9" enumb="81">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_stop_all();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
