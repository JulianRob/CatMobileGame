<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_run</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_player_run</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///variables
image_xscale = 0.8;
image_yscale = 0.8;

grav = 1; //Gravity
vsp = 0; //Vertical speed
hsp = 0; //Horizontal speed
grounded = 0; //Are you on the ground
//0 is in the air while 1 is on the ground. 
jumping = -25; //Jumping force
kills = 0; //Enemies killed
recently_hit = false; //Checks to see if you were recently hit
counter = 0; //Animation?

slay = 0; //Number need to slay?
state = 0; //For priority

reset = 0; //This resets the animation to index 0;

alarm[1] = 0;

eye = 0;
eye2 = 0;

fix = 0;

land = 0;

image_speed = 0.5; 

runLeft = -9; //running speed
runRight = 9; // running speed

var diff1X;
var diff1Y;
var diff2X;
average1 = 0;
average2 = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>recently_hit = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Invincibility Frames
counter++;
if (counter &gt; 5)
{
    counter = 1;
}

x+=hsp;

//Vertical Collision with the ground
if (place_meeting(x,y+vsp,obj_gr)) //If player meets ground within vertical speed
{
    while(!place_meeting(x,y+sign(vsp),obj_gr)) //While not touching ground, add 1 to vertical height. 
    {
        y+=sign(vsp); //1 is added to the y value moving the cat down. 
    }
    if (sign(vsp) == 1) //True if cat in air
    {
        grounded = 1; //The cat is now grounded.    
    }
    vsp = 0;
}
else
{
    grounded = 0;
}

y+=vsp;
vsp += grav;

if(grounded)
{
     grav = 10;
     for(yy = 0; !position_meeting(x+10,y+yy,obj_stable_ground); yy++)
        {
            
            diff1X = yy;
            if(yy &gt;= 200)
            {
                break;
            }
        }
   
    for(yy = 0; !position_meeting(x-10,y+yy,obj_stable_ground); yy++)
        {
            diff2X = yy;
            if(yy &gt;= 200)
            {
                break;
            }
        }
    
    for(yy = 0; !position_meeting(x,y+yy,obj_stable_ground); yy++)
    {
        diff1Y = yy;
        if(yy &gt;= 200)
        {
            break;
        }
    }
    
    if(diff1X &gt;= 200 &amp;&amp; diff2X &gt;= 200)
    {
       image_angle = 0;
    }
    
    else if(obj_controls.right)
    {
        if((abs(image_angle-radtodeg(arctan2(diff1Y-diff1X,10))) &gt; 10))
        {
            if(image_angle &lt;= radtodeg(arctan2(diff1Y-diff1X,10)))
            {
            image_angle += abs(image_angle-radtodeg(arctan2(diff1Y-diff1X,10)))/2;
            }
        
            if(image_angle &gt;=  radtodeg(arctan2(diff1Y-diff1X,10)))
            {
                image_angle -=abs(image_angle-radtodeg(arctan2(diff1Y-diff1X,10)))/2;
            }
        }
    }
    else if(obj_controls.left)
    {
        if(abs(image_angle-radtodeg(arctan2(diff2X-diff1Y,10))) &gt; 10)
        {
            if(image_angle &lt;= radtodeg(arctan2(diff2X-diff1Y,10)))
            {
                image_angle+=abs(image_angle-radtodeg(arctan2(diff2X-diff1Y,10)))/2;
            }
            
            if(image_angle &gt;=  radtodeg(arctan2(diff2X-diff1Y,10)))
            {
                image_angle -=abs(image_angle-radtodeg(arctan2(diff2X-diff1Y,10)))/2;
            }
        }
    }
}

if(!grounded)
{   
    grav = 1;
    if(image_angle &gt;= 2)
    {  
      image_angle -= 1;  
    }
    else if(image_angle &lt;= -2)
    {
        image_angle += 1;
    }
    else
    {
        image_angle = 0;
    }
}

if(position_meeting(x,y,obj_gr))
{
    show_debug_message("ok");
}

//Animation
if (state == 0)
{
    if (grounded)
    {
       image_speed = 0.5;
       sprite_index = spr_player_run;
        eye+=1;
        if(eye &gt;= 300 &amp;&amp; (image_index == 0 || eye2 = 1))
        {
            sprite_index = spr_player_blink;
            eye2 = 1;
            if(image_index = 7)
            {
                eye = 0;
                eye2 = 0;
            }
        }
    }
    else
   {
    eye = 0;
    eye2 = 0;
   }
}

if(state == 2)
{
   if(sprite_index == spr_player_attack2 &amp;&amp; fix == 0)
   {
    state = 4;
   }
   else
   {    
   
       if(vsp &lt; 0)
            {
                sprite_index = spr_player_jump;
                if (reset == 0)
                {
                    image_index = 0;
                    reset+= 1;
                }
                if(image_index == 2)
                {
                    image_speed = 0;
                }
            }
        
        if (vsp &gt; 0)
        {
            sprite_index = spr_player_jump;
            if(image_index &lt; 4)
            {
                image_index = 4;
            }
            image_speed = 0.5;
            if(image_index == 6)
            {
                image_speed = 0;
            }
        }   
        
        if(grounded == 1)
        {
            image_speed = 0.5
            image_index = 7;
            reset = 0;
            state = 0;
            sprite_index = spr_player_jump;
        }
    }
}

if (state == 4) //Attack animation
{
    if(obj_multitouch.air == 0)
    {
         fix = 0;
         if(image_index == 5)
         {
            instance_create(x+100,y-70,obj_player_attack_hitbox)
         }
         
         if(image_index = 12)
         {
            with(obj_player_attack_hitbox)
            {
                instance_destroy();
            }
         }
         
        if(image_index == 15)
        {
            state = 0;
            fix = 1;
        }
    }
    
    if(obj_multitouch.air == 1)
    {
        if (!instance_exists(obj_player_attack_hitbox2) &amp;&amp; image_index == 2)
        {
            instance_create(x+100,y,obj_player_attack_hitbox2);
        }
        
        if(image_index == 9)
        {
            image_index = 0;
            sprite_index = spr_player_run;
            state = 0;
        }
    }
    
}

if(grounded == 1 &amp;&amp; state != 4)
{
    sprite_index = spr_player_run;
}

//Death
if(obj_heart.hearts &lt;= 0)
{
    obj_controls.isActive = false;
    instance_deactivate_object(obj_straight);
    instance_deactivate_object(obj_angled);
    instance_deactivate_object(obj_left);
    instance_deactivate_object(obj_up);
    instance_deactivate_object(obj_right);
    instance_deactivate_object(obj_melee);
    instance_deactivate_object(obj_MOD);
    instance_deactivate_object(obj_switch);
    
    if(instance_exists(obj_player_head))
    {
        with(obj_player_head)
        {
            instance_destroy();
        }
    }
    visble = false;
    obj_player.recently_hit = true;
}

hsp = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !(obj_heart.hearts &lt;= 0)
{
    if (recently_hit == true)
    {
        if counter mod 5 = 0
        {
            draw_self();
        }
        else
        {
            draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,image_angle,c_white,0.25)
        }
    }
    else
    {
        draw_self();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
