<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_test2</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>speed = 0;
count = 0;
vsp = 0;
hsp = 0;
grounded = false;

fall = 0;

var diff1X;
var diff1Y;
var x1;
y1 = 0;
var x2;
y2 = 0;
line1 = false;

dir = 1;
maxSpeed = 10; //10
maxSpeedAir = 10;

count2 = 0;
fAngle = 0;

fixAngle1 = 0;
fixAngle2 = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* JUMPED BASED ON ANGLE
vsp = -(x1-x2)*2; //-25
hsp = -(y2-y1)*2; //hspeed

if(vsp &gt;= maxSpeedAir)
{
    vsp = maxSpeedAir;
}

if(vsp &lt;= -maxSpeedAir)
{
    vsp = -maxSpeedAir;
}

if(hsp &gt;= maxSpeedAir)
{
    hsp = maxSpeedAir;
}

if(hsp &lt;= -maxSpeedAir)
{
    hsp = -maxSpeedAir;
}
*/
vsp = -20;
hsp = speed;
speed = 0;
image_angle = 0;
grounded = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(keyboard_check(ord("D")))
{
    sprite_set_offset(sprite_index,sprite_get_width(sprite_index)/2,sprite_get_yoffset(sprite_index));
    image_xscale = 1;
}

if(keyboard_check(ord("A")))
{
    sprite_set_offset(sprite_index,sprite_get_width(sprite_index)/2,sprite_get_yoffset(sprite_index));
    image_xscale = -1;
}

if(grounded)
{
    count2 = 0;
    fAngle = image_angle; //first angle
    for(yy = 0; !position_meeting((x+cos(degtorad(image_angle))*10) + sin(degtorad(image_angle))*yy,(y-sin(degtorad(image_angle))*10)+cos(degtorad(image_angle))*yy,obj_stable_ground); yy++)
         {
             diff1X = yy;
             if(yy &gt;= 100)
             {
                 count2+=1;
                 image_angle+=45;
                 yy=0;
                if(count2&gt;9)
                {
                    image_angle = fAngle;
                    break;
                }
             }
         }
    for(yy = 0; !position_meeting(x+(sin(degtorad(image_angle))*yy),y+(cos(degtorad(image_angle))*yy),obj_stable_ground); yy++)
     {
         diff1Y = yy;
         if(yy &gt;= 100)
         {
             break;
         }
     }
    
    x1 = (x+cos(degtorad(image_angle))*10) + sin(degtorad(image_angle))*diff1X;
    y1 = (y-sin(degtorad(image_angle))*10)+ cos(degtorad(image_angle))*diff1X;
    x2 = x+(sin(degtorad(image_angle))*diff1Y);
    y2 = y+(cos(degtorad(image_angle))*diff1Y);
    
    var dist = sqrt(power(x2-x1,2)+power(y2-y1,2));
    
    if(radtodeg(arctan2(diff1Y-diff1X,dist)) != 0)
    {
        fixAngle2 = image_angle;
        image_angle += radtodeg(arctan2(diff1Y-diff1X,dist))/3;
        if(image_angle &gt; 360)
        {
            image_angle -= 360;
        }
        if(image_angle &lt; 0)
        {
            image_angle+=360;
        }
        fixAngle1 = image_angle;
        if(keyboard_check(ord("A")) == false &amp;&amp; keyboard_check(ord("D")) == false &amp;&amp; fixAngle2 != fixAngle1)
        {
             image_angle = fixAngle2;
        }
    }
    line1 = true;
}
else
{
    line1 = false;
}

if(keyboard_check(ord("W")))
{
    if(grounded)
    {
        if(alarm[0] == -1)
        {
            alarm[0] = 4;
        }
    }
} 

if(grounded)
{
    if(keyboard_check(ord("A")))
    {
        if(speed &gt; 0)
        {
            speed = 0;
        }
        
        if(speed &lt;=-maxSpeed)
        {
            speed = -maxSpeed;
        }
        else
        {
            speed-=1;
        }
        
        if(place_meeting(x+hspeed,y+vspeed,obj_stable_ground))
        {
            while(place_meeting(x+hspeed,y+vspeed,obj_stable_ground))
            {
                direction-=1;
                count+=1;
                if(count &gt;= 360)
                {
                    speed = 0;
                    break;
                }
            }
        }
        else if(!place_meeting(x+hspeed,y+vspeed,obj_stable_ground))
        {
            while(!place_meeting(x+hspeed,y+vspeed,obj_stable_ground))
            {
                direction+=dir;
                if(direction == 270)
                {
                    break;
                }
            }
        }
    }
    else if(keyboard_check(ord("D")))
    {
        
        if(speed &lt; 0)
        {
            speed = 0;
        }
    
        if(speed &gt;=maxSpeed)
        {
            speed = maxSpeed;
        }
        else
        {
            speed+=1;
        }
        if(place_meeting(x+hspeed,y+vspeed,obj_stable_ground))
        {
            while(place_meeting(x+hspeed,y+vspeed,obj_stable_ground))
            {
                direction+=1;
                count+=1;
                if(count &gt;= 360)
                {
                    speed = 0;
                    break;
                }
            }
        }
        else if(!place_meeting(x+hspeed,y+vspeed,obj_stable_ground))
        {
            while(!place_meeting(x+hspeed,y+vspeed,obj_stable_ground))
            {
                direction-=dir;
                if(direction == 270)
                {
                    break;
                }
            }
        }
    }
    else
    {
       if(speed &gt; 0)
        {
           speed-=1;
           if(place_meeting(x+hspeed,y+vspeed,obj_stable_ground))
            {
                while(place_meeting(x+hspeed,y+vspeed,obj_stable_ground))
                {
                    direction+=1;
                    count+=1;
                    if(count &gt;= 360)
                    {
                        break;
                    }
                }
            }
            else if(!place_meeting(x+hspeed,y+vspeed,obj_stable_ground))
            {
                while(!place_meeting(x+hspeed,y+vspeed,obj_stable_ground))
                {
                    direction-=dir;
                    if(direction == 270)
                    {
                        break;
                    }
                }
            }
        }
       else if(speed &lt; 0)
       {
            speed+=1;
             if(place_meeting(x+hspeed,y+vspeed,obj_stable_ground))
            {
                while(place_meeting(x+hspeed,y+vspeed,obj_stable_ground))
                {
                    direction-=1;
                    count+=1;
                    if(count &gt;= 360)
                    {
                        break;
                    }
                }
            }
            else if(!place_meeting(x+hspeed,y+vspeed,obj_stable_ground))
            {
                while(!place_meeting(x+hspeed,y+vspeed,obj_stable_ground))
                {
                    direction+=dir;
                    if(direction == 270)
                    {
                        break;
                    }
                }
            }
       }
    }
    count = 0;
}

if(!grounded)
{
    if(keyboard_check(ord("A")))
    {
        hsp-=1;
            if(hsp &lt;= -maxSpeedAir)
            {
                hsp = -maxSpeedAir;
            }
        if(place_meeting(x+hsp,y,obj_stable_ground))
        {
            while(!place_meeting(x+sign(hsp),y,obj_stable_ground))
            {
             x+= sign(hsp);   
            }
        }
        else
        {
            x+= hsp;
        }
    }
    else if(keyboard_check(ord("D")))
    {
        hsp+=1;
            if(hsp &gt;= maxSpeedAir)
            {
                hsp = maxSpeedAir;
            }
        if(place_meeting(x+hsp,y,obj_stable_ground))
        {
            while(!place_meeting(x+sign(hsp),y,obj_stable_ground))
            {
             x+= sign(hsp);   
            }
        }
        else
        {
            x+= hsp;
        }
    }
    else if(place_meeting(x+hsp,y,obj_stable_ground))
    {
        while(!place_meeting(x+sign(hsp),y,obj_stable_ground))
            {
             x+= sign(hsp);   
            }
            hsp = 0;
    }
    else
    {
        x+= hsp;
    }
    
    if(place_meeting(x,y+vsp,obj_stable_ground))
    {
        while(!place_meeting(x,y+sign(vsp),obj_stable_ground))
        {
            y+=sign(vsp);
        }
        vsp = 0;
        grounded = true;
    }
    else
    {
        y+=vsp;
        vsp+=1;
    }
}

if(place_meeting(x,y+20,obj_stable_ground) &amp;&amp; grounded)
{
    while(!place_meeting(x,y+1,obj_stable_ground))
    {
        y+=1;
    }
}

if(!place_meeting(x,y+1,obj_stable_ground) || !place_meeting(x-10,y+100,obj_stable_ground) || !place_meeting(x+10,y+100,obj_stable_ground))
{
    grounded = false;
    speed = 0;
}
else
{
    grounded = true;
    hsp = 0;
    vsp = 0;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(line1 == true)
{
   draw_set_colour(c_yellow);
   draw_line(x1,y1,x2,y2);
   draw_set_colour(c_red);
   draw_line(x+cos(degtorad(image_angle))*10,y-sin(degtorad(image_angle))*10,(x+cos(degtorad(image_angle))*10) + sin(degtorad(image_angle))*diff1X,(y-sin(degtorad(image_angle))*10)+cos(degtorad(image_angle))*diff1X);
   draw_set_colour(c_blue);
   draw_line(x,y,x+(sin(degtorad(image_angle))*diff1Y),y+(cos(degtorad(image_angle))*diff1Y));
}

draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
